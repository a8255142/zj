<?xml version="1.0" encoding="UTF-8"?>
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/aop   
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  ">  
<!-- 配置数据源-->  
   <!--  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
	    <property name="driverClassName"><value>${db.driverClass}</value></property>  
	    <property name="url"><value>${db.jdbcUrl}</value></property>  
	    <property name="username"><value>${db.user}</value></property>  
	    <property name="password"><value>${db.password}</value></property>  
	</bean>   -->
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢，缺省值为3000，也就是3秒。
        同<property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" /> -->
        <property name="slowSqlMillis" value="10000" />
        <property name="logSlowSql" value="true" />
        <!-- 合并参数相同的SQL 同  <property name="filters" value="mergeStat" /> 
        或者 <property name="connectionProperties" value="druid.stat.mergeSql=true" /> -->
        <property name="mergeSql" value="true" />
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="${db.jdbcUrl}" />
        <property name="username" value="${db.user}" />
        <property name="password" value="${db.password}" />
        <property name="driverClassName" value="${db.driverClass}" />
        <property name="validationQuery" value="SELECT 'x'" />
        <!-- 允许druid监控 <property name="filters" value="#{coreConfiguration['jdbc.filters']}" /> -->
       <!--  <property name="filters" value="log4j" /> -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <property name="initialSize" value="1" />
        <!-- 多个数据源时，配置该属性，标记实用通用的配置模版
        <property name="useGlobalDataSourceStat" value="true" /> -->
    </bean>
    <!-- jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
    </bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<!-- druid 是否打印SQL执行结果集 -->
    	<property name="resultSetLogEnabled" value="false" />
    	<!-- druid 是否打印SQL执行语句 -->
    	<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="dataSource" />  
	    <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property> 
        <property name="mapperLocations" value="classpath:mybatis/mappings/*.xml"/>
	</bean>
	<!-- 配置sqlSessionTemplate  -->  
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
        <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean>
	
	 <!-- 配置事务 -->  
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    <tx:annotation-driven transaction-manager="txManager" />
    
    <tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" timeout="25" read-only="true" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" timeout="25" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" timeout="25" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" timeout="25" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="common*" timeout="25" read-only="false" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="invokeService" timeout="25"  propagation="NOT_SUPPORTED" />
			<tx:method name="*" timeout="25" read-only="true" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- configuration jdbcTx for SystemManageDB -->
     <aop:config>
        <aop:pointcut id="dataAccessOperation"
            expression="execution(* com.service.impl.*.*(..)) || execution(* com.service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="dataAccessOperation" />
    </aop:config>  
	
	<!-- 配置映射器 --> 
    <bean id="baseDao" class="com.service.common.impl.BaseDaoImpl">  
        <property name="sqlSessionTemplate" ref="sqlSession" />  
        <property name="sessionFactory" ref="sqlSessionFactory" />  
    </bean>
</beans>